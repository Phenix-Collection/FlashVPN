package com.polestar.domultiple.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "CLONE_MODEL".
*/
public class CloneModelDao extends AbstractDao<CloneModel, Long> {

    public static final String TABLENAME = "CLONE_MODEL";

    /**
     * Properties of entity CloneModel.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property PackageName = new Property(1, String.class, "packageName", false, "PACKAGE_NAME");
        public final static Property Path = new Property(2, String.class, "path", false, "PATH");
        public final static Property Name = new Property(3, String.class, "name", false, "NAME");
        public final static Property Description = new Property(4, String.class, "description", false, "DESCRIPTION");
        public final static Property Index = new Property(5, int.class, "index", false, "INDEX");
        public final static Property ClonedTime = new Property(6, long.class, "clonedTime", false, "CLONED_TIME");
        public final static Property NotificationEnable = new Property(7, Boolean.class, "notificationEnable", false, "NOTIFICATION_ENABLE");
        public final static Property LockerState = new Property(8, Integer.class, "lockerState", false, "LOCKER_STATE");
        public final static Property Launched = new Property(9, Integer.class, "launched", false, "LAUNCHED");
    }


    public CloneModelDao(DaoConfig config) {
        super(config);
    }
    
    public CloneModelDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"CLONE_MODEL\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"PACKAGE_NAME\" TEXT," + // 1: packageName
                "\"PATH\" TEXT," + // 2: path
                "\"NAME\" TEXT," + // 3: name
                "\"DESCRIPTION\" TEXT," + // 4: description
                "\"INDEX\" INTEGER NOT NULL ," + // 5: index
                "\"CLONED_TIME\" INTEGER NOT NULL ," + // 6: clonedTime
                "\"NOTIFICATION_ENABLE\" INTEGER," + // 7: notificationEnable
                "\"LOCKER_STATE\" INTEGER," + // 8: lockerState
                "\"LAUNCHED\" INTEGER);"); // 9: launched
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CLONE_MODEL\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, CloneModel entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String packageName = entity.getPackageName();
        if (packageName != null) {
            stmt.bindString(2, packageName);
        }
 
        String path = entity.getPath();
        if (path != null) {
            stmt.bindString(3, path);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(4, name);
        }
 
        String description = entity.getDescription();
        if (description != null) {
            stmt.bindString(5, description);
        }
        stmt.bindLong(6, entity.getIndex());
        stmt.bindLong(7, entity.getClonedTime());
 
        Boolean notificationEnable = entity.getNotificationEnable();
        if (notificationEnable != null) {
            stmt.bindLong(8, notificationEnable ? 1L: 0L);
        }
 
        Integer lockerState = entity.getLockerState();
        if (lockerState != null) {
            stmt.bindLong(9, lockerState);
        }
 
        Integer launched = entity.getLaunched();
        if (launched != null) {
            stmt.bindLong(10, launched);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, CloneModel entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String packageName = entity.getPackageName();
        if (packageName != null) {
            stmt.bindString(2, packageName);
        }
 
        String path = entity.getPath();
        if (path != null) {
            stmt.bindString(3, path);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(4, name);
        }
 
        String description = entity.getDescription();
        if (description != null) {
            stmt.bindString(5, description);
        }
        stmt.bindLong(6, entity.getIndex());
        stmt.bindLong(7, entity.getClonedTime());
 
        Boolean notificationEnable = entity.getNotificationEnable();
        if (notificationEnable != null) {
            stmt.bindLong(8, notificationEnable ? 1L: 0L);
        }
 
        Integer lockerState = entity.getLockerState();
        if (lockerState != null) {
            stmt.bindLong(9, lockerState);
        }
 
        Integer launched = entity.getLaunched();
        if (launched != null) {
            stmt.bindLong(10, launched);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public CloneModel readEntity(Cursor cursor, int offset) {
        CloneModel entity = new CloneModel( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // packageName
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // path
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // name
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // description
            cursor.getInt(offset + 5), // index
            cursor.getLong(offset + 6), // clonedTime
            cursor.isNull(offset + 7) ? null : cursor.getShort(offset + 7) != 0, // notificationEnable
            cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8), // lockerState
            cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9) // launched
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, CloneModel entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setPackageName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setPath(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setDescription(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setIndex(cursor.getInt(offset + 5));
        entity.setClonedTime(cursor.getLong(offset + 6));
        entity.setNotificationEnable(cursor.isNull(offset + 7) ? null : cursor.getShort(offset + 7) != 0);
        entity.setLockerState(cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8));
        entity.setLaunched(cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(CloneModel entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(CloneModel entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    public boolean hasKey(CloneModel entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
